const { ethers } = require("hardhat");
const path = require("path");

/**
 * Deploy CloutX contracts for penetration testing
 * This script ensures all contracts are deployed and properly configured
 */
async function main() {
  console.log("🚀 Deploying CloutX contracts for penetration testing...");
  
  const [deployer] = await ethers.getSigners();
  console.log("Deploying with account:", deployer.address);
  console.log("Account balance:", (await deployer.getBalance()).toString());

  // Deploy MaliciousContract for testing
  console.log("\n📦 Deploying MaliciousContract...");
  const MaliciousContract = await ethers.getContractFactory("MaliciousContract");
  const maliciousContract = await MaliciousContract.deploy();
  await maliciousContract.deployed();
  console.log("MaliciousContract deployed to:", maliciousContract.address);

  // Check if main contracts are already deployed
  let deploymentData = {};
  try {
    const fs = require('fs');
    const deploymentPath = path.join(__dirname, '../deployment-improved-localhost.json');
    deploymentData = JSON.parse(fs.readFileSync(deploymentPath, 'utf8'));
    console.log("\n✅ Found existing contract deployment data");
  } catch (error) {
    console.log("\n❌ No existing deployment found. Please run deploy-improved.js first");
    console.log("💡 From CloutX root: npx hardhat run scripts/deploy-improved.js --network localhost");
    return;
  }

  // Verify contracts are accessible
  console.log("\n🔍 Verifying contract accessibility...");
  try {
    const token = await ethers.getContractAt("CloutXTokenImproved", deploymentData.contracts.cloutXToken);
    const staking = await ethers.getContractAt("StakingPool", deploymentData.contracts.stakingPool);
    const oracle = await ethers.getContractAt("RewardOracleManager", deploymentData.contracts.rewardOracleManager);
    const governance = await ethers.getContractAt("GovernanceDAO", deploymentData.contracts.governanceDAO);

    console.log("✅ All contracts accessible:");
    console.log(`   Token: ${token.address}`);
    console.log(`   Staking: ${staking.address}`);
    console.log(`   Oracle: ${oracle.address}`);
    console.log(`   Governance: ${governance.address}`);
    console.log(`   MaliciousContract: ${maliciousContract.address}`);

    // Get token info
    const name = await token.name();
    const symbol = await token.symbol();
    const totalSupply = await token.totalSupply();
    
    console.log(`\n📊 Token Info:`);
    console.log(`   Name: ${name}`);
    console.log(`   Symbol: ${symbol}`);
    console.log(`   Total Supply: ${ethers.utils.formatEther(totalSupply)} CLX`);

    // Save pentest deployment info
    const pentestDeployment = {
      timestamp: new Date().toISOString(),
      network: "localhost",
      deployer: deployer.address,
      maliciousContract: maliciousContract.address,
      mainContracts: deploymentData.contracts
    };

    const fs = require('fs');
    const pentestDeploymentPath = path.join(__dirname, 'pentest-deployment.json');
    fs.writeFileSync(pentestDeploymentPath, JSON.stringify(pentestDeployment, null, 2));
    console.log(`\n📄 Pentest deployment info saved to: pentest-deployment.json`);

  } catch (error) {
    console.log("❌ Error accessing contracts:", error.message);
    return;
  }

  console.log("\n🎯 Contracts ready for penetration testing!");
  console.log("💡 Run: npx hardhat run pentest-cloutx.js --network localhost");
  console.log("💡 Or from CloutX root: npx hardhat run PENtest/pentest-cloutx.js --network localhost");
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  }); 